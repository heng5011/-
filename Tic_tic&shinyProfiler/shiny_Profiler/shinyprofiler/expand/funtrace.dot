digraph callgraph {
"void _ShinyManager_appendTicksToCurNode(ShinyManager*)" -> "void ShinyNode_appendTicks(ShinyNode*, shinytick_t)"
"void ShinyManager_beginNode(ShinyManager*, ShinyNode*)" -> "void ShinyNode_beginEntry(ShinyNode*)"
"void ShinyManager_beginNode(ShinyManager*, ShinyNode*)" -> "void _ShinyManager_appendTicksToCurNode(ShinyManager*)"
"void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)" -> "void ShinyManager_beginNode(ShinyManager*, ShinyNode*)"
"void ShinyManager_endCurNode(ShinyManager*)" -> "void _ShinyManager_appendTicksToCurNode(ShinyManager*)"
"ShinyEndNodeOnDestruction::~ShinyEndNodeOnDestruction()"[style = "filled",color="red"]
"ShinyEndNodeOnDestruction::~ShinyEndNodeOnDestruction()" -> "void ShinyManager_endCurNode(ShinyManager*)"
"void YetMoreMath()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void YetMoreMath()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void YetAnotherMath()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void YetAnotherMath()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"int main()"[style = "filled",color="red"]
"int main()" -> "void DoSomeMath()"
"int main()" -> "void Recursion(int)"
"int main()" -> "void YetAnotherMath()"
"int main()" -> "void LazyHelloWorld()"
"int main()" -> "void YetMoreMath()"
"int main()" -> "void HelloWorld()"
"int main()" -> "void UpdateAllCharacters()"
"int main()" -> "void DoPhysicsSimulation()"
"int main()" -> "void ExecuteCommand(const char*)"
"int main()" -> "void DrawWorldObjects()"
"int main()" -> "ShinyManager& _ZTW14Shiny_instance()"
"int main()" -> "void start_threads()"
"void DoSomeMath()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void DoSomeMath()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void Recursion(int)" -> "ShinyManager& _ZTW14Shiny_instance()"
"void Recursion(int)" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void Recursion(int)" -> "void Recursion(int)"
"void Recursion(int)" -> "void millisleep(unsigned int)"
"void ExecuteCommand(const char*)" -> "ShinyManager& _ZTW14Shiny_instance()"
"void ExecuteCommand(const char*)" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void ExecuteCommand(const char*)" -> "void ShinyManager_endCurNode(ShinyManager*)"
"void DoPhysicsSimulation()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void DoPhysicsSimulation()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void CheckPhysicsRaycast()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void CheckPhysicsRaycast()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void CheckPhysicsRaycast()" -> "void ShinyManager_endCurNode(ShinyManager*)"
"void UpdateAllCharacters()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void UpdateAllCharacters()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void UpdateAllCharacters()" -> "void ShinyManager_endCurNode(ShinyManager*)"
"void UpdateAllCharacters()" -> "void CheckPhysicsRaycast()"
"void DrawWorldObjects()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void DrawWorldObjects()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void LazyHelloWorld()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void LazyHelloWorld()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void LazyHelloWorld()" -> "void millisleep(unsigned int)"
"void HelloWorld()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void HelloWorld()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void HelloWorld()" -> "void ShinyManager_endCurNode(ShinyManager*)"
"void HelloWorld()" -> "void millisleep(unsigned int)"
"std::thread::~thread()"[style = "filled",color="red"]
"std::thread::~thread()" -> "bool std::thread::joinable()"
"bool std::thread::joinable()" -> "bool std::operator==(std::thread::id, std::thread::id)"
"void sample::MainFunc1()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void sample::MainFunc1()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void sample::MainFunc1()" -> "void millisleep(unsigned int)"
"void sample::MainFunc2()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void sample::MainFunc2()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void sample::MainFunc2()" -> "void millisleep(unsigned int)"
"void sample::thread_helper()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void sample::thread_helper()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void sample::thread_helper()" -> "void millisleep(unsigned int)"
"void sample::ThreadWorker(int)" -> "void sample::thread_helper()"
"void sample::ThreadWorker(int)" -> "ShinyManager& _ZTW14Shiny_instance()"
"void sample::ThreadWorker(int)" -> "void millisleep(unsigned int)"
"void start_threads()" -> "ShinyManager& _ZTW14Shiny_instance()"
"void start_threads()" -> "void sample::ThreadWorker(int)"
"void start_threads()" -> "void sample::MainFunc2()"
"void start_threads()" -> "void ShinyManager_lookupAndBeginNode(ShinyManager*, _ShinyNode**, ShinyZone*)"
"void start_threads()" -> "void sample::MainFunc1()"
"constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)" -> "constexpr _Res std::__invoke_impl(std::__invoke_other, _Fn&&, _Args&& ...)"
"std::thread::thread(_Callable&&, _Args&& ...)"[style = "filled",color="red"]
"std::thread::thread(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"std::thread::thread(_Callable&&, _Args&& ...)" -> "static std::thread::_Invoker<std::tuple<typename std::decay<_Tp>::type, typename std::decay<_Args>::type ...> > std::thread::__make_invoker(_Callable&&, _Args&& ...)"
"std::thread::thread(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"std::thread::thread(_Callable&&, _Args&& ...)" -> "static std::thread::_State_ptr std::thread::_S_make_state(_Callable&&)"
"constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)"[style = "filled",color="red"]
"constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)" -> "constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(_UHead&&, _UTail&& ...)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(_UHead&&, _UTail&& ...)" -> "constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(_UHead&&, _UTail&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(_UHead&&, _UTail&& ...)" -> "constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(_UHead&&, _UTail&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&)" -> "constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&)"
"constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&)" -> "static constexpr _Head& std::_Head_base<_Idx, _Head, true>::_M_head(std::_Head_base<_Idx, _Head, true>&)"
"static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&)" -> "static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&)"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head>&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head>&&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&)"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head>&&)" -> "constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&)"
"constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1, _T2>&&)"[style = "filled",color="red"]
"constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1, _T2>&&)" -> "constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)"
"static std::thread::_Invoker<std::tuple<typename std::decay<_Tp>::type, typename std::decay<_Args>::type ...> > std::thread::__make_invoker(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"static std::thread::_Invoker<std::tuple<typename std::decay<_Tp>::type, typename std::decay<_Args>::type ...> > std::thread::__make_invoker(_Callable&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr _Res std::__invoke_impl(std::__invoke_other, _Fn&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr _Res std::__invoke_impl(std::__invoke_other, _Fn&&, _Args&& ...)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"static std::thread::_State_ptr std::thread::_S_make_state(_Callable&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"std::unique_ptr<_Tp, _Dp>::~unique_ptr()"[style = "filled",color="red"]
"std::unique_ptr<_Tp, _Dp>::~unique_ptr()" -> "std::__uniq_ptr_impl<_Tp, _Dp>::pointer& std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr()"
"std::unique_ptr<_Tp, _Dp>::~unique_ptr()" -> "std::unique_ptr<_Tp, _Dp>::deleter_type& std::unique_ptr<_Tp, _Dp>::get_deleter()"
"std::unique_ptr<_Tp, _Dp>::~unique_ptr()" -> "void std::default_delete<_Tp>::operator()"
"static constexpr _Head& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_head(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&)"
"static constexpr _Head& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_head(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_head(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head>&&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "static constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Inherited& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_tail(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl(std::_Tuple_impl<_Idx, _Head, _Tail ...>&&)" -> "constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&)"
"std::thread::_State_impl<_Callable>::_State_impl(_Callable&&)"[style = "filled",color="red"]
"std::thread::_State_impl<_Callable>::_State_impl(_Callable&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"std::thread::_State_impl<_Callable>::_State_impl(_Callable&&)" -> "constexpr std::thread::_State::_State()"
"std::__uniq_ptr_impl<_Tp, _Dp>::pointer& std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr()" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)"
"std::unique_ptr<_Tp, _Dp>::deleter_type& std::unique_ptr<_Tp, _Dp>::get_deleter()" -> "_Dp& std::__uniq_ptr_impl<_Tp, _Dp>::_M_deleter()"
"std::__uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl(std::__uniq_ptr_impl<_Tp, _Dp>::pointer)"[style = "filled",color="red"]
"std::__uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl(std::__uniq_ptr_impl<_Tp, _Dp>::pointer)" -> "std::__uniq_ptr_impl<_Tp, _Dp>::pointer& std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr()"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)" -> "constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)" -> "constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)" -> "constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)" -> "constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"_Dp& std::__uniq_ptr_impl<_Tp, _Dp>::_M_deleter()" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)"
"constexpr std::tuple<_T1, _T2>::tuple()"[style = "filled",color="red"]
"constexpr std::tuple<_T1, _T2>::tuple()" -> "constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl()"
"constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_head(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head, _Tail ...>::_M_head(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)"
"constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&)"
"constexpr _Head& std::__get_helper(std::_Tuple_impl<_Idx, _Head, _Tail ...>&)" -> "static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&)"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl()" -> "constexpr std::_Head_base<_Idx, _Head, false>::_Head_base()"
"constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl()" -> "constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl()"
"constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl()" -> "constexpr std::_Head_base<_Idx, _Head, true>::_Head_base()"
"void std::thread::_State_impl<_Callable>::_M_run()"[style = "filled",color="red"]
"void std::thread::_State_impl<_Callable>::_M_run()" -> "decltype (declval<std::thread::_Invoker<_Tuple>&>()"
"decltype (declval<std::thread::_Invoker<_Tuple>&>()" -> "decltype (std::__invoke((_S_declval<_Ind>)"
"decltype (std::__invoke((_S_declval<_Ind>)" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)"
"decltype (std::__invoke((_S_declval<_Ind>)" -> "constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&)"
"decltype (std::__invoke((_S_declval<_Ind>)" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)"
"decltype (std::__invoke((_S_declval<_Ind>)" -> "constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)" -> "constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&)"
"constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)" -> "constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)"
}
